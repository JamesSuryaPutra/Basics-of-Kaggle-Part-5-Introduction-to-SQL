Ready to see an example on a real dataset? The Hacker News dataset contains information on stories and comments from the Hacker News social networking site.
We'll work with the full table and begin by printing the first few rows. 

================
from google.cloud import bigquery

# Create a "Client" object
client = bigquery.Client()

# Construct a reference to the "hacker_news" dataset
dataset_ref = client.dataset("hacker_news", project="bigquery-public-data")

# API request - fetch the dataset
dataset = client.get_dataset(dataset_ref)

# Construct a reference to the "full" table
table_ref = dataset_ref.table("full")

# API request - fetch the table
table = client.get_table(table_ref)

# Preview the first five lines of the table
client.list_rows(table, max_results=5).to_dataframe()

Using Kaggle's public dataset BigQuery integration.

title	url	text	dead	by	score	time	timestamp	type	id	parent	descendants	ranking	deleted
0	None	None	If the crocodile looked him up on Google, we b...	None	raxxorrax	NaN	1633421535	2021-10-05 08:12:15+00:00	comment	28756662	28750122	NaN	NaN	None
1	None	None	What exactly are you looking for? I think Pyto...	None	abiro	NaN	1569141387	2019-09-22 08:36:27+00:00	comment	21040311	21040141	NaN	NaN	None
2	None	None	Ironically, this very project might help out w...	None	mjevans	NaN	1505769703	2017-09-18 21:21:43+00:00	comment	15279716	15276626	NaN	NaN	None
3	None	None	As you start to gain some experience it can be...	None	every_other	NaN	1538575027	2018-10-03 13:57:07+00:00	comment	18130207	18128477	NaN	NaN	None
4	None	None	Thatâ€™s what I was referring to, yes. I heard o...	None	manmal	NaN	1615664155	2021-03-13 19:35:55+00:00	comment	26449260	26449237	NaN	NaN	None
================

Let's use the table to see which comments generated the most replies. Since:
1} The parent column indicates the comment that was replied to, and
2} The id column has the unique ID used to identify each comment,

we can GROUP BY the parent column and COUNT() the id column in order to figure out the number of comments that were made as responses to a specific comment. (This might not make sense
immediately -- take your time here to ensure that everything is clear!)
Furthermore, since we're only interested in popular comments, we'll look at comments with more than ten replies. So, we'll only return groups HAVING more than ten ID's.

================
# Query to select comments that received more than 10 replies
query_popular = """
                SELECT parent, COUNT(id)
                FROM `bigquery-public-data.hacker_news.full`
                GROUP BY parent
                HAVING COUNT(id) > 10
                """
================

Now that our query is ready, let's run it and store the results in a pandas DataFrame.

================
# Set up the query (cancel the query if it would use too much of 
# your quota, with the limit set to 10 GB)
safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)
query_job = client.query(query_popular, job_config=safe_config)

# API request - run the query, and convert the results to a pandas DataFrame
popular_comments = query_job.to_dataframe()

# Print the first five rows of the DataFrame
popular_comments.head()

parent	f0_
0	29934192.0	175
1	3373702.0	75
2	24066748.0	45
3	31123102.0	42
4	9996333.0	754
================

Each row in the popular_comments DataFrame corresponds to a comment that received more than ten replies. For instance, the comment with ID 801208 received 56 replies.
